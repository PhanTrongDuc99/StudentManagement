/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.sub;
//import model.StudentTableModel;

import entities.Grade;
import entities.Profile;
import entities.StudentOfficial;
import entities.Teacher;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.List;
import java.util.Vector;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import service.CourseServiceImpl;
import service.GradeService;
import service.GradeServiceImpl;
import service.ProfileService;
import service.ProfileServiceImpl;
import service.RegisterService;
import service.RegisterServiceImpl;
import service.ResultService;
import service.ResultServiceImpl;
import service.StudentOfficialServiceImpl;
import service.TeacherService;
import service.TeacherServiceImpl;
import utils.ConvertDataTypesUtils;
import utils.ImageUtils;
import utils.RandomUtils;

/**
 *
 * @author Mr.Chien
 */
public class TeacherInformationPanel extends javax.swing.JPanel {

    private Font defaultFont;
    private final Font newFont = new Font("Tahoma", Font.BOLD, 14);

    public TeacherInformationPanel() {

        initComponents();
        btAdd.setFocusPainted(false);
        tbTeacher = new JTable();
        jSTeacher = new JScrollPane(tbTeacher);
        add(jSTeacher);
        loadDataGradeIntoJTable(teachers);
        initEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initEvents() {
        btAddEvents();
        btEditEvents();
        tfSearchEvent();
        detailColumnEvents();
        deleteColumnEvents();
    }

    private void loadDataGradeIntoJTable(List<Teacher> list) {
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {

                super.setValueAt(aValue, row, column);
            }

        };
        Vector column = new Vector();
        column.add("ID");
        column.add("Name");
        column.add("Gender");
        column.add("PhoneNumber");
        column.add("Email");
        column.add("Worlplace");
        column.add("Detail");
        column.add("Delete");

        model.setColumnIdentifiers(column);
        for (int i = 0; i < list.size(); i++) {
            Profile pro = (Profile) teachers.get(i).getProfileTeacher();

            Vector row = new Vector();
            row.add(teachers.get(i).getIdTeacher());
            row.add(pro.getFullName());
            row.add(ConvertDataTypesUtils.valueOf(pro.isGender()));
            row.add(pro.getPhoneNumber());
            row.add(pro.getEmail());
            row.add(teachers.get(i).getWorkPlace());
            row.add("<html><a href='Detail' >Detail</a></html>");
            row.add("<html><a href='Delete' >Delete</a></html>");

            model.addRow(row);
        }
        tbTeacher.setModel(model);
        tbTeacher.setRowSelectionAllowed(true);
        //  tbStudent.setCellSelectionEnabled(true);
        tbTeacher.setFocusable(false);
    }

    private void tfSearchEvent() {
        tfSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = tfSearch.getText();
                TableRowSorter<AbstractTableModel> sorter = new TableRowSorter<>();
                sorter.setModel(model);
                RowFilter<AbstractTableModel, Object> filter = RowFilter.regexFilter("(?i)" + text);
                sorter.setRowFilter(filter);
                tbTeacher.setRowSorter(sorter);
            }
        });
    }

    private void btAddEvents() {
        defaultFont = btAdd.getFont();
        btAdd.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
               TeacherAdditionForm teacherAdditionForm=new TeacherAdditionForm();
               teacherAdditionForm.setVisible(true);
//                Grade grade = new Grade();
//                String idGrade = RandomUtils.randomId(gradesId, "Gr");
//                grade.setIdGrade(idGrade);
//                grade.setTeacher(new TeacherServiceImpl().getTeacher("GV01"));
//                grade.setCourse(new CourseServiceImpl().getCourseById("K01"));
//                grade.setStartTime(LocalTime.of(00, 00));
//                grade.setEndTime(LocalTime.of(00, 00));
//                grade.setStudentQuantity(0);
//                grade.setDaysOfWeek(new DayOfWeek[]{DayOfWeek.FRIDAY, DayOfWeek.MONDAY});
//                GradeInformationForm gradeForm = new GradeInformationForm(grade, 0);
//                gradeForm.setVisible(true);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                btAdd.setFont(newFont);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btAdd.setFont(defaultFont);
            }

        });
    }

    private void btEditEvents() {
        btEdit1.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                String name = tfSearch.getText();
//                int currentStudentQuantity = (int) listStudents.stream().filter(t -> t.getGrade().getNameGrade().equals(name)).count();
//                Grade grade = grades.stream().filter(t -> t.getNameGrade().equals(name)).findFirst().get();
//                System.out.println("------------" + grade);
//                GradeInformationForm gradeInforForm = new GradeInformationForm(grade, currentStudentQuantity);
//                gradeInforForm.setVisible(true);
            }

        });
    }

    private void detailColumnEvents() {
        tbTeacher.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                int row = tbTeacher.rowAtPoint(evt.getPoint());
                int col = tbTeacher.columnAtPoint(evt.getPoint());
                if ((row >= 0 && col == 7)) {
                    Teacher teacher = teacherService.getTeacher((String) tbTeacher.getValueAt(row, 0));
                    //DetailStudentOfficialForm form = new DetailStudentOfficialForm(teacher, model, row);
                    //form.setVisible(true);
                    System.out.println(teacher);
                }
            }
        });
    }

    private void deleteColumnEvents() {
//        tbTeacher.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mousePressed(MouseEvent e) {
//                int row = tbTeacher.rowAtPoint(e.getPoint());
//                int col = tbTeacher.columnAtPoint(e.getPoint());
//                if ((row >= 0 && col == 8)) {
//                    int option = JOptionPane.showConfirmDialog(null, "Are you sure to delete this student?",
//                            "Notification", JOptionPane.YES_NO_OPTION);
//                    if (option == 0) {
//                        StudentOfficial student = stService.getStudent((String) tbTeacher.getValueAt(row, 0));
//
//                        stService.deleteStudentById(student.getId());
//                        prsv.deleteProfileById(student.getProfile().getId());
//                        ressv.deleteResultById(student.getResultStudy().getId());
//                        regsv.deleteRegisterById(student.getRegister().getId());
//                        JOptionPane.showMessageDialog(TeacherInformationPanel.this,
//                                "delete successfully!!!", "Notification",
//                                JOptionPane.OK_OPTION, ImageUtils.loadImageIcon(getClass().getResource("/images/alarm.png").getPath()));
//
//                        model.removeRow(row);
//                    }
//                }
//            }
//        });
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnTop = new javax.swing.JPanel();
        lbFind = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        btAdd = new javax.swing.JButton();
        btEdit1 = new javax.swing.JButton();
        pnCenter = new javax.swing.JPanel();
        jSTeacher = new javax.swing.JScrollPane();
        tbTeacher = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1587, 903));
        setLayout(new java.awt.BorderLayout());

        pnTop.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 2, 5, 2), javax.swing.BorderFactory.createEtchedBorder()));

        lbFind.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbFind.setText("Search");

        tfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchActionPerformed(evt);
            }
        });

        btAdd.setBackground(new java.awt.Color(153, 0, 153));
        btAdd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btAdd.setForeground(new java.awt.Color(255, 255, 255));
        btAdd.setText("Add Teacher");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btEdit1.setBackground(new java.awt.Color(255, 102, 102));
        btEdit1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btEdit1.setForeground(new java.awt.Color(255, 255, 255));
        btEdit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit-icon.gif"))); // NOI18N
        btEdit1.setText("Edit Teacher");
        btEdit1.setFocusPainted(false);
        btEdit1.setMaximumSize(new java.awt.Dimension(67, 25));
        btEdit1.setMinimumSize(new java.awt.Dimension(67, 25));
        btEdit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEdit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTopLayout = new javax.swing.GroupLayout(pnTop);
        pnTop.setLayout(pnTopLayout);
        pnTopLayout.setHorizontalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbFind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137)
                .addComponent(btEdit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        pnTopLayout.setVerticalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbFind)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAdd)
                    .addComponent(btEdit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 11, Short.MAX_VALUE))
        );

        add(pnTop, java.awt.BorderLayout.PAGE_START);

        pnCenter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List Teacher", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), new java.awt.Color(255, 0, 0))); // NOI18N
        pnCenter.setLayout(null);

        tbTeacher.setAutoCreateRowSorter(true);
        tbTeacher.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbTeacher.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Gender", "PhoneNumber", "Email", "Workplace", "Detail", "Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbTeacher.setColumnSelectionAllowed(true);
        tbTeacher.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jSTeacher.setViewportView(tbTeacher);
        tbTeacher.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tbTeacher.getColumnModel().getColumnCount() > 0) {
            tbTeacher.getColumnModel().getColumn(6).setResizable(false);
        }
        tbTeacher.getAccessibleContext().setAccessibleParent(pnCenter);

        pnCenter.add(jSTeacher);
        jSTeacher.setBounds(7, 19, 930, 400);

        add(pnCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tfSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSearchActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btAddActionPerformed

    private void btEdit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEdit1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btEdit1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btEdit1;
    private javax.swing.JScrollPane jSTeacher;
    private javax.swing.JLabel lbFind;
    private javax.swing.JPanel pnCenter;
    private javax.swing.JPanel pnTop;
    private javax.swing.JTable tbTeacher;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel model;
    private final TeacherService teacherService = new TeacherServiceImpl();
    //private final GradeService gradeService = new GradeServiceImpl();
    //private final ResultService ressv = new ResultServiceImpl();
    private final ProfileService prsv = new ProfileServiceImpl();
    //private final RegisterService regsv = new RegisterServiceImpl();
    private final List<Teacher> teachers = teacherService.getAll();

}
