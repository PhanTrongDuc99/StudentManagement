/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.sub;

import common.RegisterStatus;
import common.RegisterType;
import dao.GradeDao;
import dao.GradeDaoImpl;
import dao.ProfileDao;
import dao.ProfileDaoImpl;
import entities.Course;
import entities.Grade;
import entities.Profile;
import entities.Register;
import entities.Result;
import entities.StudentOfficial;
import entities.StudentUnofficial;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.border.Border;
import service.CourseService;
import service.CourseServiceImpl;
import service.GradeService;
import service.GradeServiceImpl;
import service.RegisterService;
import service.RegisterServiceImpl;
import service.ResultService;
import service.ResultServiceImpl;
import service.StudentOfficialService;
import service.StudentOfficialServiceImpl;
import service.StudentUnofficialService;
import service.StudentUnofficialServiceImpl;
import utils.ImageUtils;

/**
 *
 * @author SMILE ^^
 */
public class StudentsDivisionFrame extends javax.swing.JFrame {

    /**
     * Creates new form StudentsDivisionFrame
     */
    private final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    private GridLayout gridLayout = new GridLayout(5, 1, 5, 5);

    private List<Course> courses;

    private final Border defaultBorder = BorderFactory.createLineBorder(Color.WHITE, 5);
    private final Border pnSeparatetBorder = BorderFactory.createLineBorder(Color.YELLOW, 1);
    private final Border pnCenterButtonHighLightBorder = BorderFactory.createLineBorder(Color.RED, 5);
    private final Border pnCenterButtonBorder = BorderFactory.createLineBorder(Color.YELLOW, 5);
    private final Font defaultLabelFont = new Font("Tahoma", Font.BOLD, 18);

    private JButton btDivide;
    private JButton btShowWaitingStudents;

    private JPanel pnTopCenter;
    private JPanel pnMainCenter;
    private JLabel lbCourse;
    private JLabel lbSelectedCourse;

    private String idSelectedCourse;

    public StudentsDivisionFrame() {

        CourseService courseService = new CourseServiceImpl();
        courses = courseService.getAll();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        initPanels();
        initEvents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnBg = new javax.swing.JPanel();
        pnTop = new javax.swing.JPanel();
        lbTitile = new javax.swing.JLabel();
        pnCenter = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(ImageUtils.load(getClass().getResource("/images/logo.png").getPath()));
        setMinimumSize(new java.awt.Dimension(466, 253));

        pnBg.setBackground(new java.awt.Color(199, 229, 249));
        pnBg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        pnBg.setPreferredSize(new java.awt.Dimension(700, 505));
        pnBg.setLayout(new java.awt.BorderLayout());

        pnTop.setBackground(new java.awt.Color(0, 0, 102));
        pnTop.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        pnTop.setPreferredSize(new java.awt.Dimension(675, 50));

        lbTitile.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbTitile.setForeground(new java.awt.Color(255, 255, 255));
        lbTitile.setText("STUDENTS ARRANGEMENT");
        pnTop.add(lbTitile);

        pnBg.add(pnTop, java.awt.BorderLayout.PAGE_START);

        pnCenter.setBackground(new java.awt.Color(229, 229, 229));

        javax.swing.GroupLayout pnCenterLayout = new javax.swing.GroupLayout(pnCenter);
        pnCenter.setLayout(pnCenterLayout);
        pnCenterLayout.setHorizontalGroup(
            pnCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 691, Short.MAX_VALUE)
        );
        pnCenterLayout.setVerticalGroup(
            pnCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        pnBg.add(pnCenter, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnBg, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnBg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsDivisionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsDivisionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsDivisionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsDivisionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsDivisionFrame().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbTitile;
    private javax.swing.JPanel pnBg;
    private javax.swing.JPanel pnCenter;
    private javax.swing.JPanel pnTop;
    // End of variables declaration//GEN-END:variables

    private void initPanels() {
        pnBg.setPreferredSize(screenSize);
        initPnCenter();

    }

    private void initPnCenter() {
        initPnCenterComponents();

    }

    private void initPnCenterComponents() {
        pnCenter.setLayout(new BorderLayout());
        initPnTopCenter();
        initPnMainCenter();

    }

    private void initPnCenterEvents() {
        final Component[] components = pnMainCenter.getComponents();

        for (Component component : components) {
            for (Component c : ((JPanel) component).getComponents()) {

                if (c instanceof JButton) {
                    final JButton button = (JButton) c;
                    button.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mousePressed(MouseEvent e) {
                            disableHighLightButtons(((JPanel) component).getComponents());
                            button.setBorder(pnCenterButtonHighLightBorder);
                            if (((String) button.getClientProperty(button.getText())) == null) {
                                lbCourse.setText("COURSE:");
                                lbSelectedCourse.setText(button.getText());

                                JPanel panel = (JPanel) button.getParent();
                                //System.out.println((String) panel.getClientProperty(lbSelectedCourse));
                                idSelectedCourse = (String) panel.getClientProperty(lbSelectedCourse);
                                // System.out.println(idSelectedCourse);
                            } else {
                                List<StudentOfficial> studentsOfficials = new ArrayList<>();

                                StudentUnofficialService studentUnofficialService = new StudentUnofficialServiceImpl();

                                List<StudentUnofficial> studentUnofficials = studentUnofficialService.getAll();

                                for (StudentUnofficial s : studentsOfficials) {
                                    if (s.getIdRegisterCourse().equals((String) button.getClientProperty(button.getText()))) {
                                        studentUnofficials.add(s);
                                    }
                                }
                                ListOfStudentsFrame registeringStudentsFrame = new ListOfStudentsFrame(studentUnofficials, button.getText());
                                registeringStudentsFrame.setVisible(true);
                            }

                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                            disableHighLightButtons(((JPanel) component).getComponents());
                            button.setBorder(pnCenterButtonBorder);
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                            disableHighLightButtons(((JPanel) component).getComponents());
                        }

                    });
//                    button.addActionListener(new ActionListener() {
//
//                        public void actionPerformed(ActionEvent e) {
//                            System.out.println(((JButton) e.getSource()).getParent() + "The current panel is ");
//
//                            idSelectedCourse = (String) ((JPanel) ((JButton) e.getSource()).getParent()).getClientProperty(lbSelectedCourse);
//                            System.out.println(idSelectedCourse);
//                        }
//
//                    });
                }
            }
        }
    }

    private void disableHighLightButtons(Component... components) {
        for (Component component : components) {
            if (component instanceof JButton) {
                final JButton button = (JButton) component;
                button.setBorder(defaultBorder);
            }
        }
    }

    private void setPanelCourse(JPanel panel, Course course) {
        JButton button = createCourseButton(course.getNameCourse().toUpperCase());
        panel.putClientProperty(button.getText(), course.getIdCourse());
        System.out.println();
        gridLayout = new GridLayout(10, 1, 30, 30);
        panel.setLayout(gridLayout);
        panel.add(button);
        setButtonClasses(course, panel);
        pnMainCenter.add(panel);

    }

    private void setButtonClasses(Course course, JPanel jPanel) {
        GradeService gradeService = new GradeServiceImpl();
        List<Grade> grades = gradeService.getAllGradesOfCourse(course.getIdCourse());
        for (int i = 0; i < grades.size(); i++) {
            JButton button = new JButton();
            button.putClientProperty(grades.get(i).getNameGrade(), course.getIdCourse());
            button.setBackground(Color.WHITE);
            button.setFocusPainted(false);
            button.setText(grades.get(i).getNameGrade());
            jPanel.add(button);

        }
    }

    private JButton createCourseButton(String courseName) {

        JButton button = new JButton();
        button.setOpaque(true);
        button.setBackground(new Color(51, 153, 255));
        button.setForeground(Color.WHITE);
        button.setFont(defaultLabelFont);
        button.setText(courseName);
        button.setHorizontalAlignment(JLabel.CENTER);
        return button;
    }

    private void initEvents() {
        initPnCenterEvents();
        btDivideEvents();
        btShowWaitingStudents();
    }

    private void createEventButtons(JPanel jPanel) {
        btDivide = new JButton("Divide");
        jPanel.add(btDivide);
        btShowWaitingStudents = new JButton("Show waiting students");
        jPanel.add(btShowWaitingStudents);
    }

    private void initPnTopCenter() {
        pnTopCenter = new JPanel();
        pnTopCenter.setSize(675, 30);
        pnTopCenter.setPreferredSize(new java.awt.Dimension(675, 50));
        lbCourse = new JLabel("COURSE:___________");
        lbCourse.setForeground(Color.WHITE);
        pnTopCenter.add(lbCourse);
        lbSelectedCourse = new JLabel("");
        lbSelectedCourse.setForeground(Color.WHITE);
        pnTopCenter.setBackground(Color.BLUE);
        pnTopCenter.add(lbSelectedCourse);
        createEventButtons(pnTopCenter);
        pnCenter.add(pnTopCenter, BorderLayout.PAGE_START);

    }

    private void initPnMainCenter() {
        pnMainCenter = new JPanel();
        createPanels();
        setPnMainCenter();
        pnCenter.add(pnMainCenter, BorderLayout.CENTER);
    }

    private void createPanels() {
        for (int i = 0; i < courses.size(); i++) {
            JPanel pnCourse = new JPanel();
            pnCourse.setBorder(pnSeparatetBorder);
            if (i % 2 == 0) {
                pnCourse.setBackground(new Color(229, 229, 229));
            } else {
                pnCourse.setBackground(new Color(204, 204, 204));
            }
            pnMainCenter.add(pnCourse);
        }

    }

    private void setPnMainCenter() {
        int index = 0;
        pnMainCenter.setLayout(new BoxLayout(pnMainCenter, BoxLayout.X_AXIS));
        final Component[] components = pnMainCenter.getComponents();
        for (Component component : components) {
            if (component instanceof JPanel) {
                Course course = courses.get(index);
                final JPanel pn = (JPanel) component;
                setPanelCourse(pn, course);
                index++;
            }
        }
    }

    private void btDivideEvents() {
        btDivide.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // divideGrades();

                if (!lbSelectedCourse.getText().isEmpty()) {

                    StudentUnofficialService st = new StudentUnofficialServiceImpl();
                    List<StudentUnofficial> studentsUnofficial = st.getAll();
                    
                    List<StudentUnofficial> students = new ArrayList<>();

                    Course selectedCourse = new Course();
                    for (Course c : courses) {
                        if (c.getNameCourse().equalsIgnoreCase(lbSelectedCourse.getText())) {
                            selectedCourse = c;
                            break;
                        }
                    }
                    for (StudentUnofficial s : studentsUnofficial) {
                        if (s.getIdRegisterCourse().equals(selectedCourse.getIdCourse())) {
                            System.out.println(s);
                            students.add(s);

                        }
                    }
                    GradeService gradeService = new GradeServiceImpl();
                    List<Grade> grades = gradeService.getAllGradesOfCourse(selectedCourse.getIdCourse());
                    for (StudentUnofficial s : students) {
                        System.out.println(s);
                        String idResult = "RS";
                        for (Grade g : grades) {
                            for (int j = 0; j < g.getStudentQuantity(); j++) {
                                System.out.println(g.getStudentQuantity());
                                
                                System.out.println("ID GRADE:" + g.getIdGrade());
                                
                                System.out.println(s.getRegister().getId());
                                Register register = new Register(s.getRegister().getId(), RegisterStatus.REGISTERED, s.getRegister().getType());
                                System.out.println(register.getId());
                                RegisterService registerService = new RegisterServiceImpl();
                                registerService.updateRegister(register);

                                Result result = new Result(0.0, 0.0, 0.0, 0.0, 0, g.getIdGrade(), idResult + s.getId());
                                ResultService resultService = new ResultServiceImpl();
                                resultService.insertResult(result);

                                ProfileDao profileDao = new ProfileDaoImpl();
                                Profile profile = profileDao.getProfile(s.getProfile().getId());

                                GradeDao gradeDao = new GradeDaoImpl();

                                Grade grade = gradeDao.getGrade(g.getIdGrade());
                                
                                StudentOfficial so = new StudentOfficial(result, grade, s.getId(), profile, 0.0, 0.0, register);
                                System.out.println(so);

                                StudentOfficialService sos = new StudentOfficialServiceImpl();
                                sos.insertStudent(so);

                                StudentUnofficialService studentUnofficialService = new StudentUnofficialServiceImpl();
                                System.out.println(studentUnofficialService.deleteUnofficialStudentById(s.getId()));
                            }
                        }
                    }
//                    for (StudentUnofficial o : students) {
//                        System.out.println(o);
//                    }
                    JOptionPane.showMessageDialog(null, "Divide grades successfully!");
                } else {
                    JOptionPane.showMessageDialog(null, "Please choose a course for dividing grades");
                }
            }

        });

    }

    private void btShowWaitingStudents() {
        btShowWaitingStudents.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (!lbSelectedCourse.getText().isEmpty()) {
                    Course selectedCourse = new Course();
                    for (Course c : courses) {
                        if (c.getNameCourse().equalsIgnoreCase(lbSelectedCourse.getText())) {
                            selectedCourse = c;
                            System.out.println(selectedCourse);
                            break;
                        }
                    }
                    StudentUnofficialService studentUnofficialService = new StudentUnofficialServiceImpl();

                    List<StudentUnofficial> studentUnofficials = studentUnofficialService.getAll();

                    for (StudentUnofficial s : studentUnofficials) {
                        if (s.getIdRegisterCourse().equals(selectedCourse.getIdCourse())) {
                            System.out.println(s);
                            studentUnofficials.add(s);
                        }
                    }

                    ListOfStudentsFrame registeringStudentsFrame = new ListOfStudentsFrame(studentUnofficials, selectedCourse.getNameCourse());
                    registeringStudentsFrame.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Please choose a course for dividing grades");
                }
            }

        });

    }

}
